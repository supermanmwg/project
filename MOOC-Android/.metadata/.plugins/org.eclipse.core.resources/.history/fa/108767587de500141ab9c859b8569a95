package vandy.mooc;

import java.net.URL;

import org.apache.http.client.entity.UrlEncodedFormEntity;

import android.app.Activity;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;

/**
 * An Activity that downloads an image, stores it in a local file on
 * the local device, and returns a Uri to the image file.
 */
public class DownloadImageActivity extends Activity {
    /**
     * Debugging tag used by the Android logger.
     */
    private final String TAG = getClass().getSimpleName();
    
    /**
     *Handler to handler runnable
     */
    Handler handler = new Handler();

    /**
     * Hook method called when a new instance of Activity is created.
     * One time initialization code goes here, e.g., UI layout and
     * some class scope variable initialization.
     *
     * @param savedInstanceState object that contains saved state information.
     */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        // Always call super class for necessary
        // initialization/implementation.
        // @@ TODO -- you fill in here.
    	super.onCreate(savedInstanceState);
        // Get the URL associated with the Intent data.
        // @@ TODO -- you fill in here.
    	Intent intent = getIntent();
    	Uri uri = intent.getParcelableExtra(MainActivity.URINAME);
    	Log.i(TAG, "Uri name is " + uri.toString());

        // Download the image in the background, create an Intent that
        // contains the path to the image file, and set this as the
        // result of the Activity.

        // @@ TODO -- you fill in here using the Android "HaMeR"
        // concurrency framework.  Note that the finish() method
        // should be called in the UI thread, whereas the other
        // methods should be called in the background thread.  See
        // http://stackoverflow.com/questions/20412871/is-it-safe-to-finish-an-android-activity-from-a-background-thread
        // for more discussion about this topic.	
    	Thread postThread = new Thread(new downloadTask(uri));
    	postThread.start();
    	try {
			postThread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
			Log.i(TAG, "Create post thread failed!");
		}

    	finish();
    }
    
    private class downloadTask implements Runnable{
    	
    	private Uri url;
    	
    	public downloadTask(Uri mUrl) {
    		this.url = mUrl;
		}
    	
		public void run() {
			
			 final Uri backUri =  DownloadUtils.downloadImage(getApplicationContext(), url);
			 handler.post(new Runnable() {
				
				@Override
				public void run() {
			    	Intent backIntent = new Intent();
			    	backIntent.putExtra(MainActivity.PATHIMAGENAME, backUri.toString());
			    	setResult(RESULT_OK, backIntent);
			    	Log.i(TAG, "back Intent is successed");
				}
			});
			
		}
	}
}
